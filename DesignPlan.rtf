{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deftab706{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\nowidctlpar\hyphpar0\kerning1\b\f0\fs24\lang255 RTSGame notes and plans\b0\par
\par
\b Choltfo\b0\par

\pard\pagebb\nowidctlpar\hyphpar0\b Implementation of structures:\b0\par

\pard\nowidctlpar\hyphpar0\b\par
\b0\tab A structure is an impassible section of terrain with a static sprite rendered overtop. It may or may not maintain a constant resouce draw/production (e.g: electricity in Red Alert, Tiberian Sun, etc.).\par
\par
\tab Structures will, upon creation, set the impassibility flag on the terrain beneath them. Structures cannot be built atop impassible terrain, significant eleveation changes, or water. (\ul Water units? Naval yards?\ulnone )\par
\par
\tab A structure also enables the production of structures or units (MOBs). This is managed via the ProductionOptions std::vector<ProductionOption> that each structure possesses.\par
\tab\par
\tab Each structure's ProductionQueue is unique to itself. Two structures of the same kind can simultaneously be producing seperate items.\par
\par
\tab A structure's position is stored as an sf::vector2i, in tile rendering coordinates. A function for getting its position in world space is provided for pathfinding for units.\par
\par
\b ProductionQueue and ProductionOptions:\b0\par
\par
\tab Every production-facility-type structure (\ul Are these seperate classes?\ulnone ) stores a vector of production options, and its own queue of items being produced. Both these vectors should handle unit spawns, structure creations, and superweapons simultaneously, but they should all be blocking eachother, i.e, no charging weapons while training units.\par
\par
\tab These options are rendered for the player in two places. There is a main production queue, showing all production underway, on the bottom left corner of the screen. When a structure is selected, its production queue is shown overlayed on the production options menu.\par
\par
\tab Checking of the ProductionQueue is accomplished in the update loop for every structure.\par
\tab\par
\tab Upon completion of an item, the different types (unit, structure, weapon) diverge.\par
\tab Charged weapons pending firing will block further production from that structure. Upon use, the queue is rid of the weapon, and regular production continues.\par
\tab Units will spawn at the point on the edge of the structure nearest the "flag" for the structure. Said flag can be moved by selecting the structure and issuing a "move" command to an empty spot. All units spawned from the structure thereafter will be issues that move command.\par
\tab\par
\tab When a player selects a production option, the costs for the purchase are immediately subtracted from their resources (\i a le\i0  AoE3). Cancelling an item of the production queue results in the reimbursement of the costs multipled by the fraction of time remaining before order fulfillment.\par

\pard\pagebb\nowidctlpar\hyphpar0\b Units (MOBs)\b0\par

\pard\nowidctlpar\hyphpar0\b\par
\b0\tab A unit is a mobile object that can be commanded, and has a player affiliation.\par
\tab The affiliated player can select that unit and others and issue commands, consiting of either "move here", "attack this", or a contextual action depending on the type of unit and the type of target, such as "repair this" for engineer-type units, "heal this" for that type of unit, and "harvest this" for collecting units.\par
\b\par
\b0\tab A unit's position is stored as a sf::Vector2f, representing its position in world space, where 32u = 1 grid space.\par
\b\par
\b0\tab All units have a command queue. The queue is appended when a command is given while a modifier key (shift) is held, and overwritten when a command is given while the key is not held.\par
\tab\par
\tab The statistics for determining attack and interaction rates are stored in a seperate vector inside of the game object. (\ul Although this could be, and would make things much easier by being, a global variable.\ulnone ) This UnitTemplate has a maximum health value, attack delay, damage, speed, and multipliers for types of attack.\par
\b\par
\b0\tab When a unit is selected, its health is shown as a bar above it. It is surrounded with a small box to clearly denote the selected unit. A series of lines connecting the command queue items are also drawn if a single (\ul multiple? How many?\ulnone ) unit is selected.\par
\b\par
Resources\b0\par
\b\par
\b0\tab Metal and food are collectable \i resources\i0 . They can be accumulated with time and are spent permanently. Purchase of structures, and units, and use of superweapons spends these resources. A shortfall of resources prevents further spending of these resources, i.e, no purchasing units, structures, or superweapons.\par
\b\par
\b0\tab Energy and mana are immediate \i supplies\i0 . They cannot be accumulated. They are produced and consumed continually and simultaneously. Any surplus is wasted, but allows for absorption of contingencies, e.g, a superweapon strike destroying a production facility.\par
\tab Construction of most structures increases use (decreases level) of these supplies. However, power plants and altars or equivalent increase the amount available.\par
\tab A shortfall reduces the rate of operation (brown-out) or renders structures inoperable.\par
\b\par
\b0\tab Note: Amount of supply, vs quantity of resources. One is continuous, for all intents and purposes, the other is discreet.\par
\tab Resource and supply levels are shown on the player's screen at all times. \ul UI element needed\ulnone\par
\b\par
Victory conditions\b0\par
\tab The game is considered won once:\par
1) All enemy units and structures have been removed.\par
2) All enemies lack ability to create units.\par
3) All enemy players have surrendered.\par
\b\par
Surrender\b0\par
\b\par
\b0\tab Individual surrender forfeits control of resources and structures, and removes all units. Structures can still be pilfered/used for target practice/used for cover.\par
\b\par
Superweapons\b0\par
\b\par
\b0\tab A superweapon is a single use ability with a substantial reload time and cost. Things like lightning strikes, waves of fire, nuclear weapons, biological weapons, and similar.\par
\tab They are treated like any other ProductionQueue element, except upon completion they appear in the top right of the screen, with their icon underneath a superimposed "READY" tag.\par
\b\par
Map\b0\par
\b\par
\tab\b0 The map consists of a 512x512-tile grid. Each tile is 32px square. To get world space coordinates of the tiles, multiply by 32. Recall that rendering is inverted cartesian, so lower y-values appear higher.\par
\tab Each space of the grid consists of a tileReference for the base texture, a bool passable to indicate pathfinding and structure placing worthiness, and an elevation integer for pathfinding, structure placing, and combat advantages (Higher ground advantage for ranged weapons).\par
\tab A second tile-reference exists for each grid square. This is the stencil layer, which is drawn over the base texture where (e.g) small craters or burns have been left. If this reference is nullptr, then don't draw it.\par
\b\par
General goal of the game\b0\par
\b\par
\b0\tab Procure resources, create units, develop technology, and wipe the other team off the map.\par
\par
\par
\b Interface design and user interaction\par
\par
\b0\tab The user primarily interacts via the mouse. Interaction is supplemented by keyboard shortcuts and modifier keys.\par
\par
\tab The interface is single-state, single view, with the exception of a pause screen\par
IDLE - Idling. Player can select units and structures. Units/structures may be selected. If so, their build options are displayed. If an entity (unit/structure) is already selected, new selections override unless a modifier is held (\ul CTRL\ulnone ). Attempting an empty selection clears the selection.\par
PLACING - The player is attempting to place a structure. The proposed construction site is highlighted underneath the mouse cursor on the map. \par
\par
\b Interface elements\b0\par
\par
\tab\b World\b0 : View of the map, with all other elements overlayed. Generated by game.render();\par
\tab\b Construction options\b0 : Vertical bar on the right. Two columns of tiles. Each tile represents a construction option for one of the currently selected units. If two of the same unit type are selected, the purchase of a single unit will purchase one unit from both production structures.\par
\tab\b Minimap\b0 : A scaled down view of the world. Shows the entire map at 1/2 scale (256*256) with coloured pixels indicating unit and structure positions. Also has fog of war superimposed to obscure unknown units.\par
\par
\b Fog of War\b0\par
\par
\tab The fog of war represents the unkowns of a battlefield. There are three states for the fog:\par
\tab UNDISCOVERED: No information is available about this tile. Area is entirely blacked out. All entities and map tiles are hidden.\par
\tab UNKNOWN: Area has been explored, but is not currently visible. Tiles and structures are shown, but units are hidden.\par
\tab VISIBLE: Units have line of sight to this space. All units and structures are visible, as is al terrain data.\par
\par
\tab The default state is UNDISCOVERED. Therefore, the map will be entirely obscured at the start of the game. Over the first frame's update cycle, the player's initial unit's will reveal their vicinity.\par
\tab Every few frames (\ul How many?\ulnone ), every unit will update their player's fog map. Area not currently VISIBLE or UNDISCOVERED becomes UNKNOWN.\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
}
 